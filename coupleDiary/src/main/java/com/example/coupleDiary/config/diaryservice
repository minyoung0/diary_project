@Service
@RequiredArgsConstructor
public class DiaryService {

    private final RedisTemplate<String, Object> redisTemplate;
    private final DiaryRepository diaryRepository;

    public List<Diary> getDiariesByUser(String userId) {
        String key = "diary:" + userId;

        // 1) 캐시 조회
        List<Diary> cached = (List<Diary>) redisTemplate.opsForValue().get(key);
        if (cached != null) {
            return cached;
        }

        // 2) 캐시에 없다면 DB 조회
        List<Diary> diaries = diaryRepository.findByUserId(userId);

        // 3) 캐시에 저장 (10분 TTL)
        redisTemplate.opsForValue().set(key, diaries, 10, TimeUnit.MINUTES);

        return diaries;
    }
}






   @GetMapping("/CheckAuth")
   public ResponseEntity<?> me(Authentication auth) {
       Authentication auth2 = SecurityContextHolder.getContext().getAuthentication();
       System.out.println("[CheckAuth] auth=" + auth2);

       MemberEntity user = (MemberEntity) auth.getPrincipal();

       Map<String, Object> result = new HashMap<>();
       result.put("userId", user.getUserId());
       result.put("coupleId", user.getCoupleId());

       return ResponseEntity.ok(result);
   }

}